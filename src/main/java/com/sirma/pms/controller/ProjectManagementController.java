package com.sirma.pms.controller;

import com.sirma.pms.constants.ProjectManagementConstant;
import com.sirma.pms.dto.ProjectDto;
import com.sirma.pms.exception.ProjectManagemnetException;
import com.sirma.pms.exception.ProjectNotFoundException;
import com.sirma.pms.service.ProjectService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import jakarta.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.util.List;

/**
 * Controller class dedicated to handle all the endpoint details to handle project management CRUD operations
 */
@RestController
@RequestMapping("/project")
public class ProjectManagementController {
    @Autowired
    ProjectService projectService;


    @Operation(summary = "Get a Project by its id")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Response will have the details",
                    content = {@Content(mediaType = "application/json",
                            schema = @Schema(implementation = ProjectDto.class))}),
            @ApiResponse(responseCode = "404", description = ProjectManagementConstant.PROJECT_NOT_FOUND,
                    content = @Content)})
    /**
     * This method is dedicated to retrieve a project by its id from H2 in-memory database
     * In case the project not present in DB , it will throw custom exception ProjectNotFound
     * example
     * 1.http://localhost:8080/project/2
     * {
     *     "id": 2,
     *     "name": "Project-1",
     *     "description": "Test project ",
     *     "startDate": "2024-04-27",
     *     "endDate": "2024-04-27",
     *     "status": "In-Progress",
     *     "createdBy": "Susmita",
     *     "updatedBy": "John"
     * }
     *
     * 2. No project for id 4
     * {
     *     "errorMessage": "Project not found with given Id:4",
     *     "requestedURI": "/project/4"
     * }
     */
    @GetMapping("/{id}")
    ProjectDto getProjectById(@Parameter(description = "id of project to be retrieved") @PathVariable String id) throws ProjectNotFoundException {
        return projectService.getProjectById(Integer.parseInt(id));
    }

    @Operation(summary = "Get All projects in DB ")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Response will have all project details",
                    content = {@Content(mediaType = "application/json",
                            schema = @Schema(implementation = ProjectDto.class))}),
            @ApiResponse(responseCode = "404", description = ProjectManagementConstant.PROJECTS_NOT_FOUND,
                    content = @Content)})
    /**
     * This method is dedicated to retrieve all projects from H2 in-memory database
     * In case the projects  present in DB , it will throw custom exception ProjectNotFound
     * example
     * http://localhost:8080/project/all
     * [
     *     {
     *         "id": 2,
     *         "name": "Project-1",
     *         "description": "Test project ",
     *         "startDate": "2024-04-27",
     *         "endDate": "2024-04-27",
     *         "status": "In-Progress",
     *         "createdBy": "Susmita",
     *         "updatedBy": "John"
     *     },
     *     {
     *         "id": 3,
     *         "name": "Project-2",
     *         "description": "Test project2 ",
     *         "startDate": "2024-04-27",
     *         "endDate": "2024-04-27",
     *         "status": "In-Progress",
     *         "createdBy": "Susmita",
     *         "updatedBy": "John"
     *     }
     * ]
     *
     * 2. No project in DB
     * {
     *     "errorMessage": "No projects found in DB",
     *     "requestedURI": "/project/all"
     * }
     */
    @GetMapping("/all")
    List<ProjectDto> getAllProjects() throws ProjectNotFoundException {
        return projectService.getAllProjects();
    }

    @Operation(summary = "Save/Create a Project with details, ID will be autogenerated and will be availabe in response ")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Response will have the details of the saved project",
                    content = {@Content(mediaType = "application/json",
                            schema = @Schema(implementation = ProjectDto.class))}),
            @ApiResponse(responseCode = "400", description = "errorMessage\": \"{fieldName=fieldName is mandatory}",
                    content = @Content)}
    )

    /**
     * This API is responsible to create/save a project in in-memory h2 database
     * it accepts project dto json structure as in put body and returns the saved data as response
     * This also handles the mandatory field validations for each input fields
     * we should not pass ID and JPA will generate the id and return in response it will still save the details with latest details
     * @param projectDto
     * {
     *     "name": "Project-2",
     *     "description": "Test project2 ",
     *     "startDate": "2024-04-27",
     *     "endDate": "2024-04-27",
     *     "status":"In-Progress",
     *     "createdBy":"Susmita",
     *     "updatedBy":"John"
     * }
     * @return projectDto
     * {
     *     "id": 3,
     *     "name": "Project-2",
     *     "description": "Test project2 ",
     *     "startDate": "2024-04-27",
     *     "endDate": "2024-04-27",
     *     "status": "In-Progress",
     *     "createdBy": "Susmita",
     *     "updatedBy": "John"
     * }
     *
     * 2. With empty name:-
     * {
     *     "errorMessage": "{name=Name is mandatory}",
     *     "requestedURI": "/project"
     * }
     */
    @PostMapping(produces = "application/json", consumes = "application/json")
    ProjectDto createProject(@Valid @RequestBody ProjectDto projectDto) throws ProjectManagemnetException {
        return projectService.saveProject(projectDto);
    }

    @Operation(summary = "Update a project with given details")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Response with the updated project details",
                    content = {@Content(mediaType = "application/json",
                            schema = @Schema(implementation = ProjectDto.class))}),
            @ApiResponse(responseCode = "400", description = "errorMessage\": \"{fieldName=fieldName is mandatory}",
                    content = @Content),
            @ApiResponse(responseCode = "404", description = ProjectManagementConstant.PROJECT_NOT_FOUND,
                    content = @Content)})
    @PutMapping(produces = "application/json", consumes = "application/json")
    /**
     * This API is responsible to update an existing  project in in-memory h2 database
     * it accepts project dto json structure as in put body and returns the saved data as response
     * This also handles the mandatory field validations for each input fields
     * @param projectDto
     * {
     *     "id":"2",
     *     "name": "Project-2",
     *     "description": "Test project2-updated ",
     *     "startDate": "2024-04-27",
     *     "endDate": "2024-04-27",
     *     "status":"Started",
     *     "createdBy":"Susmita",
     *     "updatedBy":"Susmita"
     * }
     * {
     *     "id": 2,
     *     "name": "Project-2",
     *     "description": "Test project2-updated ",
     *     "startDate": "2024-04-27",
     *     "endDate": "2024-04-27",
     *     "status": "Started",
     *     "createdBy": "Susmita",
     *     "updatedBy": "Susmita"
     * }
     *
     * 2.with empty Name:
     * {
     *         "errorMessage": "{name=Name is mandatory}",
     *          "requestedURI": "/project"
     *   }
     */

    ProjectDto updateProject(@Valid @RequestBody ProjectDto project) throws ProjectNotFoundException,ProjectManagemnetException {
        return projectService.updateProject(project);
    }

    @Operation(summary = "Delete a  Project by its ID")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Success, Project has been deleted ",
                    content = {@Content(mediaType = "application/json",
                            schema = @Schema(implementation = ProjectDto.class))})}
    )
    /**
     * This method is dedicated to delete a project from h2 DB by a given project id
     * Returns a success message upon deletion of the project
     *Inc ase project not found in DB for the id we are trying to delete it will throw exception
     *
     * Example:
     * http://localhost:8080/project/1
     *
     * Response :-----Project has been deleted successfully  ID :1
     *
     * 2.http://localhost:8080/project/3
     * {
     *     "errorMessage": "Project not found with given Id:3",
     *     "requestedURI": "/project/3"
     * }
     */
    @DeleteMapping("/{id}")
    String deleteProject(@Parameter(description = "id of project to be deleted") @PathVariable String id) throws ProjectNotFoundException {
        return projectService.deleteProject(Integer.parseInt(id));
    }
}
